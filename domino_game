#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct _pecaDomino{
	int numberRight;
	int numberLeft;
	struct _pecaDomino *right;
	struct _pecaDomino *left;
}TppecaDomino;

TppecaDomino *inicializa(){
	return NULL;
}

TppecaDomino *cria_pecas(){
	int i, j;
	TppecaDomino *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	novo->left = NULL;
	TppecaDomino *aux = novo, *anterior = novo;
	novo->numberRight = 0;
	novo->numberLeft  = 0;

	for(i=1; i<=6; i++){
		for(j=0; j<=i; j++){
			aux = (TppecaDomino *)malloc(sizeof(TppecaDomino));
			aux->numberRight = j;
			aux->numberLeft = i;
			aux->left = anterior;
			anterior->right = aux;
			anterior = aux;
		}
	}

	aux->right = NULL;
	return novo;
}

TppecaDomino *insere_inicio(TppecaDomino *l, int num1, int num2){
	TppecaDomino *aux = l, *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	if(aux == NULL){
		novo->numberLeft = num1;
		novo->numberRight = num2;
		novo->left = NULL;
		novo->right = NULL;
		return novo;
	}
	while(aux != NULL){
		aux = aux->right;
	}
	novo->numberLeft = num1;
	novo->numberRight = num2;
	novo->right = l;
	novo->left = NULL;
	l->left = novo;
	return novo;
}

TppecaDomino *insere_fim(TppecaDomino *l, int m, int n){
	TppecaDomino *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	if(l == NULL){
		novo->right = NULL;
		novo->left = NULL;
		novo->numberLeft = m;
		novo->numberRight = n;
		return novo;
	}
	TppecaDomino *aux = l;
	novo->right = NULL;
	novo->numberLeft = m;
	novo->numberRight = n;
	while(aux->right!= NULL){
		aux = aux->right;
	}
	novo->left = aux;
	aux->right = novo;
	return l;
}

TppecaDomino *excluir(TppecaDomino *l, int num1, int num2){
	TppecaDomino *aux = l, *prox = NULL, *anterior;
	if(num1 == aux->numberLeft && num2 == aux->numberRight && aux->left == NULL){
		aux = l->right;
		aux->left = NULL;
		free(l);
		return aux;
	}
	while(num1 != aux->numberLeft || num2 != aux->numberRight){
		anterior = aux;
		aux = aux->right;
		prox = aux->right;		
	}
	if(aux->right == NULL){
		anterior = aux->left;
		anterior->right = NULL;
		free(aux);
		return l;
	}
	anterior->right = prox;
	prox->left = anterior;
	free(aux);
	return l;
}


TppecaDomino *copiar(TppecaDomino *l, int num){
	TppecaDomino *aux = l;
	int i;
	for(i = 0; i<num; i++){
		aux = aux->right;
	}
	return aux;
}

void imprime(TppecaDomino *l){
	TppecaDomino *p = l;
	int aux = 0;
	while(p != NULL){
		printf("|%d|%d| ", p->numberLeft, p->numberRight);
		aux++;
		if(aux == 6) printf("\n");
		if(aux == 6) aux = 0;
		p = p->right;
	}
	printf("\n");
}

/*void valida_jogada(TppecaDomino *jogador, TppecaDomino *mesa, int escolha_peca){
	TppecaDomino *aux = jogador, *aux_mesa = mesa;
	int i, teste = 0, inicio = 0, final = 0, escolha_lado = 0;
	for(i = 0; i<escolha_peca; i++){
		aux = aux->right;
	}
	
	if(aux->numberRight == aux_mesa->numberRight){
		inicio++;
	}else if(aux->numberRight == aux_mesa->numberLeft){
		inicio++;
	}else if(aux->numberLeft == aux_mesa->numberLeft){
		inicio++;
	}else if(aux->numberLeft == aux_mesa->numberRight){
		inicio++;
	}

	while(aux_mesa->right != NULL){
		aux_mesa = aux_mesa->right;
	}
		
	if(aux->numberRight == aux_mesa->numberRight){
		final++;
	}else if(aux->numberRight == aux_mesa->numberLeft){
		final++;
	}else if(aux->numberLeft == aux_mesa->numberLeft){
		final++;
	}else if(aux->numberLeft == aux_mesa->numberRight){
		final++;
	}

	if(inicio > 0 && final > 0){
		printf("De qual lado deseja inserir a peça?\n1 - Esquerdo ou 2 - Direito\n");
	//	do{
		//	if(aux->numberLeft == )
			scanf("%d", &escolha_lado);
			if(escolha_lado == 1){
				aux = copiar(jogador, escolha_peca);
				mesa = insere_inicio(mesa, aux->numberLeft, aux->numberRight);
				jogador = excluir(jogador, aux->numberLeft, aux->numberRight);
				
			}else if(escolha_lado == 2){
				aux = copiar(jogador, escolha_peca);
				mesa = insere_fim(mesa, aux->numberLeft, aux->numberRight);
				jogador = excluir(jogador, aux->numberLeft, aux->numberRight);
					
			}else{
				printf("Erro. Escolha uma opção entre 1 e 2.\n");
			}
		//}while(escolha_lado != 1 || escolha_lado != 2);
	}else if(inicio > 0 && final == 0){
		aux = copiar(jogador, escolha_peca);
		mesa = insere_inicio(mesa, aux->numberLeft, aux->numberRight);
		jogador = excluir(jogador, aux->numberLeft, aux->numberRight);
	}else if(inicio == 0 && final > 0){
		aux = copiar(jogador, escolha_peca);
		mesa = insere_fim(mesa, aux->numberLeft, aux->numberRight);
		jogador = excluir(jogador, aux->numberLeft, aux->numberRight);	
	}

	//return 0;
}*/

int valida_jogada(TppecaDomino *mesa, TppecaDomino *jogada){
	TppecaDomino *aux = jogada, *aux_mesa = mesa;
	int x, y, teste = 0;
	while(teste != 2){
		if(aux->numberRight == aux_mesa->numberRight){
			x = jogada->numberLeft;
			y = jogada->numberRight;
			jogada->numberLeft = y;
			jogada->numberRight = x;
			return 1;	
		} 
		else if(aux->numberRight == aux_mesa->numberLeft) return 1;
		else if(aux->numberLeft == aux_mesa->numberLeft) return 1;
		else if(aux->numberLeft == aux_mesa->numberRight) return 1;
  		while(aux_mesa->right != NULL){ aux_mesa = aux_mesa->right;	}
	  teste++;
	}
	return 0;
}

TppecaDomino *insere_mesa(TppecaDomino *mesa, TppecaDomino *jogada){
	TppecaDomino *aux = mesa;
	if(aux->left == NULL && jogada->numberRight == aux->numberLeft){
		aux = insere_inicio(aux, jogada->numberLeft, jogada->numberRight);
		return aux;
	}else if(aux->left == NULL && jogada->numberLeft == aux->numberLeft){
		aux = insere_inicio(aux, jogada->numberRight, jogada->numberLeft);
		return aux;
	}
	while(aux->right != NULL){  
		aux = aux->right;
	}
		if(jogada->numberLeft == aux->numberRight){
			aux = insere_fim(aux, jogada->numberLeft, jogada->numberRight);
			mesa->right = aux->left;
			return aux;
		}else if(jogada->numberRight == aux->numberRight){
			aux = insere_fim(aux, jogada->numberRight, jogada->numberLeft);
			return aux;
		}
	return mesa;
}

TppecaDomino *remove_peca_jogada(TppecaDomino *mao, TppecaDomino *jogada){
	TppecaDomino *ant, *prox, *aux = mao;
	while(aux != jogada){
		aux = aux->right;
	}
	if(aux->right == NULL){
		ant = aux->left;
		ant->right = NULL;
		free(aux);
		return mao;
	}
	if(aux->left == NULL){
		prox = aux->right;
		prox->left = NULL;
		mao = prox;
		free(aux);
		return mao;
	}
	ant = aux->left;
	prox = aux->right;
	ant->right = prox;
	prox->left = ant;
	free(aux);
	return mao;
}



int contar_elementos(TppecaDomino *l){
	TppecaDomino *aux = l;
	int elementos = 1;
	do{
		elementos++;
		aux = aux->right;		
	}while(aux != NULL);
	return elementos;
}

int main(){
	system("reset");
	TppecaDomino *monte, *jogador = NULL, *aux, *bot = NULL, *mesa = NULL, *pecajogada;
	int i, cont = 0, cont2 = 0, escolha_peca, escolha_lado, jogada_verifica = 0, numero_pecas, jogo_ativo = 1;
	monte = cria_pecas();
	imprime(monte);
	printf("\n");
	srand(clock());
	
	while(cont < 6){// DISTRIBUINDO 6 PEÇAS INICIAIS PRO JOGADOR
		i = abs(rand()%(28-cont));
		aux = copiar(monte, i);
		jogador = insere_fim(jogador, aux->numberLeft, aux->numberRight);
		cont++;
		monte = excluir(monte, aux->numberLeft, aux->numberRight);
	}
	while(cont2 < 6){//PRENCHE A MÃO DO BOT.
		i = abs(rand()%(22-cont));
		aux = copiar(monte, i);
		bot = insere_fim(bot, aux->numberLeft, aux->numberRight);
		cont2++;
		monte = excluir(monte, aux->numberLeft, aux->numberRight);
	}

	i = abs(rand()%16); //ESCOLHE UMA PEÇA ALEATÓRIA PRA COMEÇAR A PARTIDA.
	aux = copiar(monte, i);
	mesa = insere_fim(mesa, aux->numberLeft, aux->numberRight);
	monte = excluir(monte, aux->numberLeft, aux->numberRight);
	
	imprime(monte);
	printf("\n");
	printf("\tJOGADOR:\n");
	imprime(jogador);
	printf("\tBOT:\n");
	imprime(bot);
	printf("\tMESA:\n");
	imprime(mesa);

	while(jogo_ativo == 1){

		//Interatividade do jogador
		printf("Digite o número da peça que deseja jogar.\n(Exemplo: 3 = terceira peça escolhida de sua mão)\n");
		int pecaescolhida;
		scanf("%d", &pecaescolhida);
		pecajogada = jogador;
		for(i = 1; i<pecaescolhida; i++){ pecajogada = pecajogada->right; }
		pecaescolhida = valida_jogada(mesa, pecajogada);
		if(pecaescolhida){
			mesa = insere_mesa(mesa, pecajogada);
			jogador = remove_peca_jogada(jogador, pecajogada);			
		}else{
			printf("Insira um índice de peça válido(entre 1 e %d).\n", numero_pecas);
		}
		system("clear");
		imprime(monte);
		printf("\n\n\n");
		printf("\tJOGADOR:\n");
		imprime(jogador);
		printf("\tBOT:\n");
		imprime(bot);
		printf("\tMESA:\n");
		imprime(mesa);

	}


	return 0;
}
