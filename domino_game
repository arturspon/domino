#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct _pecaDomino{
	int numberRight;
	int numberLeft;
	struct _pecaDomino *right;
	struct _pecaDomino *left;
}TppecaDomino;

TppecaDomino *inicializa(){
	return NULL;
}

TppecaDomino *cria_pecas(){
	int i, j;
	TppecaDomino *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	novo->left = NULL;
	TppecaDomino *aux = novo, *anterior = novo;
	novo->numberRight = 0;
	novo->numberLeft  = 0;

	for(i=1; i<=6; i++){
		for(j=0; j<=i; j++){
			aux = (TppecaDomino *)malloc(sizeof(TppecaDomino));
			aux->numberRight = j;
			aux->numberLeft = i;
			aux->left = anterior;
			anterior->right = aux;
			anterior = aux;
		}
	}

	aux->right = NULL;
	return novo;
}

TppecaDomino *insere_inicio(TppecaDomino *l, int num1, int num2){
	TppecaDomino *aux = l, *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	if(aux == NULL){
		novo->numberLeft = num1;
		novo->numberRight = num2;
		novo->left = NULL;
		novo->right = NULL;
		return novo;
	}
	while(aux != NULL){
		aux = aux->right;
	}
	novo->numberLeft = num1;
	novo->numberRight = num2;
	novo->right = l;
	novo->left = NULL;
	l->left = novo;
	return novo;
}

TppecaDomino *insere_fim(TppecaDomino *l, int m, int n){
	TppecaDomino *novo = (TppecaDomino *)malloc(sizeof(TppecaDomino));
	if(l == NULL){
		novo->right = NULL;
		novo->left = NULL;
		novo->numberLeft = m;
		novo->numberRight = n;
		return novo;
	}
	TppecaDomino *aux = l;
	novo->right = NULL;
	novo->numberLeft = m;
	novo->numberRight = n;
	while(aux->right!= NULL){
		aux = aux->right;
	}
	novo->left = aux;
	aux->right = novo;
	return l;
}

TppecaDomino *excluir(TppecaDomino *l, int num1, int num2){
	TppecaDomino *aux = l, *prox = NULL, *anterior;
	if(num1 == aux->numberLeft && num2 == aux->numberRight && aux->left == NULL){
		aux = l->right;
		aux->left = NULL;
		free(l);
		return aux;
	}
	while(num1 != aux->numberLeft || num2 != aux->numberRight){
		anterior = aux;
		aux = aux->right;
		prox = aux->right;		
	}
	if(aux->right == NULL){
		anterior = aux->left;
		anterior->right = NULL;
		free(aux);
		return l;
	}
	anterior->right = prox;
	prox->left = anterior;
	free(aux);
	return l;
}


TppecaDomino *copiar(TppecaDomino *l, int num){
	TppecaDomino *aux = l;
	int i;
	for(i = 0; i<num; i++){
		aux = aux->right;
	}
	return aux;
}

void imprime(TppecaDomino *l){
	TppecaDomino *p = l;
	int aux = 0;
	while(p != NULL){
		printf("|%d|%d| ", p->numberLeft, p->numberRight);
		aux++;
		if(aux == 6) printf("\n");
		if(aux == 6) aux = 0;
		p = p->right;
	}
	printf("\n");
}

int valida_jogada(TppecaDomino *l, TppecaDomino *mesa, int num){
	TppecaDomino *aux = l, *aux_mesa = mesa;
	int i;
	for(i = 0; i<num; i++){
		aux = aux->right;
	}
	if(aux->numberRight == aux_mesa->numberRight){
		return 1;
	}else if(aux->numberRight == aux_mesa->numberLeft){
		return 1;
	}else if(aux->numberLeft == aux_mesa->numberLeft){
		return 1;
	}else if(aux->numberLeft == aux_mesa->numberRight){
		return 1;
	}
	return 0;
}

int main(){
	system("clear");
	TppecaDomino *monte, *jogador = NULL, *aux, *bot = NULL, *mesa = NULL;
	int i, cont = 0, cont2 = 0, escolha_peca, jogada_verifica = 0;
	monte = cria_pecas();
	imprime(monte);
	printf("\n");
	srand(clock());
	
	while(cont < 6){// DISTRIBUINDO 6 PEÇAS INICIAIS PRO JOGADOR
		i = abs(rand()%(28-cont));
		aux = copiar(monte, i);
		jogador = insere_fim(jogador, aux->numberLeft, aux->numberRight);
		cont++;
		monte = excluir(monte, aux->numberLeft, aux->numberRight);
	}
	while(cont2 < 6){//PRENCHE A MÃO DO bot.
		i = abs(rand()%(22-cont));
		aux = copiar(monte, i);
		bot = insere_fim(bot, aux->numberLeft, aux->numberRight);
		cont2++;
		monte = excluir(monte, aux->numberLeft, aux->numberRight);
	}

	i = abs(rand()%16); //ESCOLHE UMA PEÇA ALEATÓRIA PRA COMEÇAR A PARTIDA.
	aux = copiar(monte, i);
	mesa = insere_fim(mesa, aux->numberLeft, aux->numberRight);
	monte = excluir(monte, aux->numberLeft, aux->numberRight);
	
	imprime(monte);
	printf("\n");
	printf("\tJOGADOR:\n");
	imprime(jogador);
	printf("\tBOT:\n");
	imprime(bot);
	printf("\tMESA:\n");
	imprime(mesa);

	//Interatividade do jogador
	printf("Digite o número da peça que deseja jogar.\n(Exemplo: 3 = terceira peça escolhida de sua mão)\n");
	scanf("%d", &escolha_peca);
	jogada_verifica = valida_jogada(jogador, mesa, escolha_peca);
	if(jogada_verifica == 1){
		printf("\nJOGADA VÁLIDA PARÇA!\n");
		jogador = copiar(jogador, )
	} else {
		printf("\nTA MALUCO!? ESSA JOGADA É IMPOSSÍVEL!\n");
	}

	return 0;
}
